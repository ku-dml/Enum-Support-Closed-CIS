import sys
import random

def printInputError():
    print('$ python gen_random_graph_BA.py (1) (2) (3) (4) (5)')
    print('(1) : name of the output file')
    print('(2) : random seed')
    print('(3) : n, number of vertices')
    print('(4) : m0, number of vertices in initial graph')
    print('(5) : m, number of edges for adding vertices')
    sys.exit()


# input parameters
if len(sys.argv) < 6 : printInputError()

outFile = open(sys.argv[1], 'w') # output file
random.seed(int(sys.argv[2]))
NoV = int(sys.argv[3]) # number of vertices
NoIV = int(sys.argv[4]) # number of initial vertices
NoAE = int(sys.argv[5]) # number of adding edges

if NoV < 0 : printInputError()
if NoIV < 0 or NoV < NoIV : printInputError()
if NoAE < 0 or NoIV < NoAE: printInputError()


# generate the graph
# generate initial graph (complete graph w/ m0 vertecies)
edgeList = []
deg = [0] * (NoV + 1)
SoD = 0 # sum of degree of every vertecies

for i in range(1, NoIV) :
    for j in range(i + 1, NoIV + 1) :
        edgeList.append([i, j])
        deg[i] += 1
        deg[j] += 1
        SoD += 2

# adding new vertex j into the graph
for j in range(NoIV + 1, NoV + 1) :
    avlVertex = list(range(1, j)) # available vertices
    SoAD = SoD # sum of degree of every available vertices
    
    for k in range(NoAE) :
        itrVertex = iter(avlVertex)
        i = 0
        r = random.random() * SoAD
        
        # select a vertex for connecting j
        while 0 <= r :
            i = next(itrVertex)
            r -= deg[i]

        avlVertex.remove(i)
        SoAD -= deg[i]
        
        # connect vertex i and vertex j
        edgeList.append([i, j])
        deg[i] += 1
        deg[j] += 1
        SoD += 2


# write the ouuput file
outFile.write('c generated by Barbasi-Albert model (m0 = {}, m = {})\n'.format(NoIV, NoAE))
outFile.write('p edge {} {}\n'.format(NoV, len(edgeList)))
for edge in edgeList :
    outFile.write('e {} {}\n'.format(edge[0], edge[1]))